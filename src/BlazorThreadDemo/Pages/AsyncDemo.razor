@page "/"

<PageTitle>Async vs Blocking Demo</PageTitle>

<h1>Async vs Blocking Demonstration</h1>

<div class="alert alert-info mb-4">
    <p><strong>Why Async Matters in Blazor WebAssembly:</strong></p>
    <p>Even though Blazor WASM runs on a single thread, using async methods allows the browser's event loop to process UI updates and user interactions while waiting for operations to complete.</p>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-danger text-white">
                <h3>Blocking Operation</h3>
            </div>
            <div class="card-body">
                <p>This simulates a synchronous blocking operation that freezes the UI.</p>
                <button class="btn btn-danger" @onclick="RunBlockingOperation" disabled="@isBlockingRunning">
                    @if (isBlockingRunning)
                    {
                        <span>Processing...</span>
                    }
                    else
                    {
                        <span>Run Blocking Operation (3 seconds)</span>
                    }
                </button>
                <div class="mt-3">
                    <p><strong>Status:</strong> @blockingStatus</p>
                    <p><strong>Result:</strong> @blockingResult</p>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-success text-white">
                <h3>Async Operation</h3>
            </div>
            <div class="card-body">
                <p>This simulates an asynchronous non-blocking operation that keeps the UI responsive.</p>
                <button class="btn btn-success" @onclick="RunAsyncOperation" disabled="@isAsyncRunning">
                    @if (isAsyncRunning)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Processing...</span>
                    }
                    else
                    {
                        <span>Run Async Operation (3 seconds)</span>
                    }
                </button>
                <div class="mt-3">
                    <p><strong>Status:</strong> @asyncStatus</p>
                    <p><strong>Progress:</strong> @asyncProgress%</p>
                    <div class="progress mb-2">
                        <div class="progress-bar bg-success" role="progressbar" style="width: @asyncProgress%"></div>
                    </div>
                    <p><strong>Result:</strong> @asyncResult</p>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h3>UI Responsiveness Test</h3>
        </div>
        <div class="card-body">
            <p>Click the counter button to test UI responsiveness while operations are running:</p>
            <button class="btn btn-primary" @onclick="IncrementCounter">
                Click me! Counter: @counter
            </button>
            <div class="mt-3">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <span class="ms-2">This spinner should keep rotating smoothly during async operations but might freeze during blocking operations.</span>
            </div>
        </div>
    </div>
</div>

<div class="mt-4">
    <div class="alert alert-warning">
        <h4>Key Observations:</h4>
        <ul>
            <li><strong>Blocking Operation:</strong> Freezes the entire UI. The counter button won't work, the spinner might stop, and no UI updates occur.</li>
            <li><strong>Async Operation:</strong> Keeps the UI responsive. You can click the counter, the spinner keeps rotating, and progress updates are shown.</li>
            <li>Both operations take the same amount of time (3 seconds), but the user experience is vastly different!</li>
        </ul>
    </div>
</div>

@code {
    private int counter = 0;
    private bool isBlockingRunning = false;
    private bool isAsyncRunning = false;
    private string blockingStatus = "Ready";
    private string blockingResult = "";
    private string asyncStatus = "Ready";
    private string asyncResult = "";
    private int asyncProgress = 0;

    private void IncrementCounter()
    {
        counter++;
    }

    private void RunBlockingOperation()
    {
        isBlockingRunning = true;
        blockingStatus = "Running (UI will freeze)...";
        blockingResult = "";
        StateHasChanged();

        // Simulate expensive synchronous operation
        var startTime = DateTime.Now;
        var result = 0;

        // This blocks the thread for 3 seconds
        while ((DateTime.Now - startTime).TotalSeconds < 3)
        {
            // Simulate CPU-intensive work
            for (int i = 0; i < 1000000; i++)
            {
                result = i * 2 / 3;
            }
        }

        blockingStatus = "Completed";
        blockingResult = $"Processed at {DateTime.Now:HH:mm:ss}. Notice the UI was frozen!";
        isBlockingRunning = false;
    }

    private async Task RunAsyncOperation()
    {
        isAsyncRunning = true;
        asyncStatus = "Running (UI remains responsive)...";
        asyncResult = "";
        asyncProgress = 0;

        // Simulate async operation with progress updates
        for (var i = 0; i <= 10; i++)
        {
            await Task.Delay(300); // Yields control back to the browser
            asyncProgress = i * 10;
            StateHasChanged(); // Update UI with progress
        }

        // Simulate final async work
        await SimulateAsyncWork();

        asyncStatus = "Completed";
        asyncResult = $"Processed at {DateTime.Now:HH:mm:ss}. UI stayed responsive!";
        isAsyncRunning = false;
    }

    private async Task<string> SimulateAsyncWork()
    {
        // Simulate an async operation like an HTTP request
        await Task.Delay(200);
        return "Work completed successfully";
    }
}
